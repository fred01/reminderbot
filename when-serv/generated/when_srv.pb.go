// Code generated by protoc-gen-go. DO NOT EDIT.
// source: when_srv.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	when_srv.proto

It has these top-level messages:
	WhenRequest
	WhenResponse
*/
package generated

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type WhenRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *WhenRequest) Reset()                    { *m = WhenRequest{} }
func (m *WhenRequest) String() string            { return proto.CompactTextString(m) }
func (*WhenRequest) ProtoMessage()               {}
func (*WhenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WhenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type WhenResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *WhenResponse) Reset()                    { *m = WhenResponse{} }
func (m *WhenResponse) String() string            { return proto.CompactTextString(m) }
func (*WhenResponse) ProtoMessage()               {}
func (*WhenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WhenResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*WhenRequest)(nil), "main.WhenRequest")
	proto.RegisterType((*WhenResponse)(nil), "main.WhenResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for When service

type WhenClient interface {
	// Sends a greeting
	Parse(ctx context.Context, in *WhenRequest, opts ...grpc.CallOption) (*WhenResponse, error)
}

type whenClient struct {
	cc *grpc.ClientConn
}

func NewWhenClient(cc *grpc.ClientConn) WhenClient {
	return &whenClient{cc}
}

func (c *whenClient) Parse(ctx context.Context, in *WhenRequest, opts ...grpc.CallOption) (*WhenResponse, error) {
	out := new(WhenResponse)
	err := grpc.Invoke(ctx, "/main.When/Parse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for When service

type WhenServer interface {
	// Sends a greeting
	Parse(context.Context, *WhenRequest) (*WhenResponse, error)
}

func RegisterWhenServer(s *grpc.Server, srv WhenServer) {
	s.RegisterService(&_When_serviceDesc, srv)
}

func _When_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhenServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.When/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhenServer).Parse(ctx, req.(*WhenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _When_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.When",
	HandlerType: (*WhenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Parse",
			Handler:    _When_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "when_srv.proto",
}

func init() { proto.RegisterFile("when_srv.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xcf, 0x48, 0xcd,
	0x8b, 0x2f, 0x2e, 0x2a, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc,
	0x53, 0x52, 0xe4, 0xe2, 0x0e, 0xcf, 0x48, 0xcd, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11,
	0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3,
	0x95, 0x34, 0xb8, 0x78, 0x20, 0x4a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x24, 0xb8, 0xd8,
	0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x61, 0xca, 0x60, 0x5c, 0x23, 0x0b, 0x2e, 0x16, 0x90, 0x4a,
	0x21, 0x03, 0x2e, 0xd6, 0x80, 0xc4, 0xa2, 0xe2, 0x54, 0x21, 0x41, 0x3d, 0x90, 0x25, 0x7a, 0x48,
	0x36, 0x48, 0x09, 0x21, 0x0b, 0x41, 0x4c, 0x54, 0x62, 0x70, 0x92, 0xe4, 0xe2, 0x00, 0xb9, 0x0c,
	0xe4, 0x44, 0x27, 0xb0, 0x83, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x03, 0x18, 0x93, 0xd8,
	0xc0, 0xce, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x3b, 0x64, 0x0c, 0xc0, 0x00, 0x00,
	0x00,
}
